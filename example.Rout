
R version 3.5.3 (2019-03-11) -- "Great Truth"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin15.6.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> library(MASS)
> library(mvtnorm)
> library(survival)
> library(glmpath)
> library(lars)
Loaded lars 1.2

> 
> # Load Functions
> source("R/SIM.R")
> source("R/FUN.R")
> 
> set.seed(123)
> N <- 5000
> p.y <- 2
> gam.true <- c(1, 0.5)
> myB.dist <- "exp"
> yes.CLR <- TRUE
> yes.DepCen <- TRUE
> yes.Z <- TRUE
> m.match <- 1
> a0.match <- c(0, 1)
> yes.regularize <- (p.y > length(gam.true))
> myind.Zmatch <- 1:length(a0.match) + 3 + p.y
> yes.betaonly <- FALSE
> yes.pos.only <- FALSE
> t0 <- seq(0.1, 1.5, by = 0.01) 
> n.t0 <- length(t0)
> yy0 <- matrix(rep(c(0, 1), rep(p.y, 2)), ncol = 2)
> 
> # Simulate Data
> ind.remove <- TRUE
> count0 <- 0
> while (ind.remove) {
+   mydata.cht <- SIM.FUN(nn = N, DepCen = yes.DepCen, Zmatch = yes.Z, 
+                         a0 = a0.match, p.add.noise = p.y - length(gam.true))
+   mydata.ncc <- mydata.cht[[1]]
+   Vij.IND <- mydata.cht[[2]] 
+   Iik0.mat <- mydata.cht[[3]]
+   ind.remove <- sum(Vij.IND[, 2] == 0) > 0 
+   count0 <- count0 + 1 
+   if(count0 > 1) { print(count0 - 1) }
+ }
> # Conditional Logistic Regression
> if (yes.CLR) {
+   junk1 <- NCC.Cox.FUN.clogit(
+     mydata.ncc, Vij.IND, y0.cut = yy0, Zmatch.ind = myind.Zmatch)
+   bhat1 <- junk1[-(1:(n.t0 * ncol(yy0))), ]
+ } else {
+   bhat1 <- junk1 <- NULL
+ }
> # IPW Resampling Approach
> junk2 <- NCC.Cox.FUN.Regularize(
+   mydata.ncc, Vij.IND, Iik0 = Iik0.mat, Zmatch.ind = myind.Zmatch, 
+   rtn = "ALL", regularize = yes.regularize, y0.cut = yy0, 
+   betaonly = yes.betaonly, B0 = 1000, pos.only = yes.pos.only)
> if (yes.betaonly) {
+   bhat2 <- matrix(junk2, ncol = 3)
+ } else { 
+   bhat2 <- matrix(junk2[-(1:ncol(yy0))], ncol = 3)[-(1:(n.t0 * ncol(yy0))), ]
+ }
> colnames(bhat2) <- c("Est", "SE1", "SE2")
> 
> # CLR Results
> bhat1
            Est        SE
yy.V1 1.0921642 0.1286621
yy.V2 0.3737518 0.1134395
> 
> # Resampling Results
> bhat2
           Est        SE1        SE2
[1,] 1.0430553 0.07302369 0.07696405
[2,] 0.3990445 0.06558009 0.07063376
> 
> proc.time()
   user  system elapsed 
 19.644   0.459  20.114 
